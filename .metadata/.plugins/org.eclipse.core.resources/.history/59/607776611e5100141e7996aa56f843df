package server.fi;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import model.Tasks;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;
import android.app.ProgressDialog;
import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.util.Log;

/**
 * Upload and Download data from server
 * 
 * @author bereket
 * 
 */
public class Server implements TaskDataDownloder {
	private Vector<Tasks> tasks=null;
	private Context context=null;
	private final static String url = "http://tutbereket.net/lily_homecare/get_data_nfc_tag_id.php";
	TaskObsorver mObsorver;
	
	public Server (Context context){
		context = this.context;
		
	}
	
	

	public void setmObsorver(TaskObsorver mObsorver) {
		this.mObsorver = mObsorver;
	}
	public Vector<TaskForOneCustomer>getTasks(){
		return this.tasks;
	}

	@Override
	public void reteriveData(){
		new DownLoader().execute(url);
		
	}

	@Override
	public void uploadData() {
		// TODO Auto-generated method stub

	}

	public boolean checkNetwork() {
		ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
		if (networkInfo != null && networkInfo.isConnected()) {
			return true;
		}
		Log.d("CheckNetwork", "No network, cannot initiate retrieval!");
		return false;
	}

	protected String readInputStream(InputStream stream) throws IOException,
			UnsupportedEncodingException {
		Reader reader = null;
		reader = new InputStreamReader(stream, "UTF-8");
		String content = new String();
		char[] buffer = new char[1024];
		int read;
		do {
			read = reader.read(buffer);
			if (read > 0) {
				content += String.valueOf(buffer, 0, read);
			}
		} while (read > 0);
		return content;
	}
	/**
	 * downloading tasks 
	 * @author bereket
	 *
	 */
	/**
	 * Request available transports, by day, starting point and destination point
	 * 
	 * @author Thinkpad
	 * 
	 */
	private class SearchAvilableTransports extends
			AsyncTask<String, Void, String> {
		ProgressDialog progressDialog ;
		
		
		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			progressDialog= ProgressDialog.show(AskRideActivity.this, "Searching", "Searching Avilable Rides");
		}

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			String content = null;
			try {
				DefaultHttpClient httpClient = new DefaultHttpClient();
				System.out.println(params[0]);
				
				HttpPost httpPost = new HttpPost(params[0]);
				List<NameValuePair> nameValuePaire = new ArrayList<NameValuePair>(
						4);

				nameValuePaire.add(new BasicNameValuePair("starting", from));
				nameValuePaire.add(new BasicNameValuePair("destination",
						to));
				nameValuePaire
						.add(new BasicNameValuePair("date", date));
				nameValuePaire
				.add(new BasicNameValuePair("phonenumber", phonenumber));
				httpPost.setEntity(new UrlEncodedFormEntity(nameValuePaire));

				HttpResponse httpResponse = httpClient.execute(httpPost);
				HttpEntity httpEntity = httpResponse.getEntity();
				
				InputStream inputStream = httpEntity.getContent();
				BufferedReader reader = new BufferedReader(
						new InputStreamReader(inputStream, "iso-8859-1"), 8);
				StringBuffer stringBuffer = new StringBuffer();
				String line = null;
				while ((line = reader.readLine()) != null) {
					stringBuffer.append(line);
				}
				inputStream.close(); // free memory

				content = stringBuffer.toString();
				return content;
			} catch (Exception ex) {
				ex.printStackTrace();
				return null;
			}

		}

		@Override
		protected void onPostExecute(String result) {
			progressDialog.dismiss();
			System.out.println(result);
			try {
				
			  Parser.parse(result);
				
			} catch (JSONException e) {
				e.printStackTrace();
			}
			
		}
	
	}
}
