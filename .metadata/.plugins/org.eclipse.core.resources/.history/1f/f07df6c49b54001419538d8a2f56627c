package com.example.translili;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONException;

import data.Parser;
import data.ScheduleList;

import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.DialogFragment;
import android.text.Html;
import android.text.format.DateFormat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.webkit.MimeTypeMap;
import android.widget.ArrayAdapter;

import android.widget.Button;
import android.widget.DatePicker;
import android.widget.ListView;
import android.widget.TextView;

public class BookedRideActivity extends Activity {
	private String name;
	private String phonenumber;
	private String date;
	private ListView listView;
	private TextView tvBookedNameDate;

	public final static String BOOKED_URL = "http://tutbereket.net//LiliTransport/search_user_books.php";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_booked_ride);

		listView = (ListView) findViewById(R.id.bookedRidesListView);
		tvBookedNameDate = (TextView) findViewById(R.id.tvBookedName);

		name = getIntent().getStringExtra("name");

		phonenumber = getIntent().getStringExtra("phonenumber");
		date = getIntent().getStringExtra("date");

		tvBookedNameDate.setText(Html.fromHtml("Name: " + name + "<br/>"
				+ "Date: " + date));
		new SearchBooksAsynckTask().execute(phonenumber, date);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.booked_ride, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	/**
	 * Time Piker
	 * 
	 * @author Lily
	 * 
	 */
	public static class DatePickerFragment extends DialogFragment implements
			DatePickerDialog.OnDateSetListener {
		Button datePicker;

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current date as the default date in the picker
			final Calendar c = Calendar.getInstance();
			int currentYear = c.get(Calendar.YEAR);
			int currentMonth = c.get(Calendar.MONTH);
			int currentDay = c.get(Calendar.DAY_OF_MONTH);

			// Create a new instance of DatePickerDialog and return it
			return new DatePickerDialog(getActivity(), this, currentYear,
					currentMonth, currentDay);
		}

		@Override
		public void onDateSet(DatePicker arg0, int arg1, int arg2, int arg3) {
			// TODO Auto-generated method stub
			Log.d("arg0", arg0.toString());

			datePicker = (Button) getActivity().findViewById(R.id.datePicker);
			String date = Integer.toString(arg3) + "-" + Integer.toString(arg2)
					+ "-" + Integer.toString(arg1);

			datePicker.setText(date);

		}
	}

	public static class TimePicerDialog extends DialogFragment implements
			TimePickerDialog.OnTimeSetListener {
		Button datePicker;

		@Override
		public Dialog onCreateDialog(Bundle savedInstanceState) {
			// Use the current date as the default date in the picker
			final Calendar c = Calendar.getInstance();
			int hour = c.get(Calendar.HOUR_OF_DAY);
			int minute = c.get(Calendar.MINUTE);
			

			// Create a new instance of DatePickerDialog and return it
			return new TimePickerDialog(getActivity(), this, hour, minute,
	                DateFormat.is24HourFormat(getActivity()));
		}

		@Override
		public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
	        // Do something with the time chosen by the user
	    }
	}

	private class BookArrayAdapter extends ArrayAdapter<ScheduleList> {
		Vector<ScheduleList> bookedRides;
		Context context;

		public BookArrayAdapter(Context context, Vector<ScheduleList> resource) {
			super(context, R.layout.booked_rides, resource);
			this.bookedRides = resource;
			this.context = context;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			LayoutInflater inflator = (LayoutInflater) context
					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

			if (convertView == null) {
				convertView = inflator.inflate(R.layout.booked_rides, parent,
						false);
			}

			TextView tvServiceGroup = (TextView) convertView
					.findViewById(R.id.tvBookedServiceGroup);
			TextView tvGroupId = (TextView) convertView
					.findViewById(R.id.tvBookedGroupID);
			TextView tvStartinpoint = (TextView) convertView
					.findViewById(R.id.tvBookedStartingPoint);
			TextView tvDestination = (TextView) convertView
					.findViewById(R.id.tvBookedDestination);
			TextView tvPickupTime = (TextView) convertView
					.findViewById(R.id.tvBookedPickUpTime);
			TextView tvPhoneNumber = (TextView) convertView
					.findViewById(R.id.tvBookedPhoneNumber);

			tvServiceGroup.setText(Html.fromHtml("<b>" + "Type: </b>"
					+ bookedRides.get(position).getServiceGroup()));
			tvGroupId.setText(Html.fromHtml("<b>" + "Id: </b>"
					+ bookedRides.get(position).getTaxiID()));
			tvStartinpoint.setText(Html.fromHtml("<b>" + "Starting Point: </b>"
					+ bookedRides.get(position).getStartingPoint()));
			tvDestination.setText(Html.fromHtml("<b>" + "Destination: </b>"
					+ bookedRides.get(position).getDestinationPoint()));
			tvPickupTime.setText(Html.fromHtml("<b>" + "Pick up Time : </b>"
					+ bookedRides.get(position).getPickUpTime()));
			tvPhoneNumber.setText(Html.fromHtml("<b>" + "Phone number : </b>"
					+ bookedRides.get(position).getPhonenumber()));

			return convertView;
		}
	}

	private class SearchBooksAsynckTask extends AsyncTask<String, Void, String> {
		ProgressDialog progressDialog;

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			progressDialog = ProgressDialog.show(BookedRideActivity.this,
					"Searching", "Searching booked rides....");
		}

		@Override
		protected String doInBackground(String... params) {
			// TODO Auto-generated method stub
			String content = null;
			try {
				DefaultHttpClient httpClient = new DefaultHttpClient();
				System.out.println(params[0]);
				// get the first argument passed to the execute method
				HttpPost httpPost = new HttpPost(BOOKED_URL);
				List<NameValuePair> nameValuePaire = new ArrayList<NameValuePair>(
						3);

				nameValuePaire.add(new BasicNameValuePair("phonenumber",
						params[0]));
				nameValuePaire.add(new BasicNameValuePair("date", params[1]));
				httpPost.setEntity(new UrlEncodedFormEntity(nameValuePaire));

				HttpResponse httpResponse = httpClient.execute(httpPost);
				HttpEntity httpEntity = httpResponse.getEntity();
				InputStream inputStream = httpEntity.getContent();
				BufferedReader reader = new BufferedReader(
						new InputStreamReader(inputStream, "iso-8859-1"), 8);
				StringBuffer stringBuffer = new StringBuffer();
				String line = null;
				while ((line = reader.readLine()) != null) {
					stringBuffer.append(line);
				}
				inputStream.close(); // free memory

				content = stringBuffer.toString();
				return content;
			} catch (Exception ex) {
				ex.printStackTrace();
				return null;
			}

		}

		@Override
		protected void onPostExecute(String result) {
			System.out.println(result);
			try {
				listView.setAdapter(new BookArrayAdapter(
						BookedRideActivity.this, Parser.parse(result)));
			} catch (JSONException e) {
				e.printStackTrace();
			}
			progressDialog.setMessage(result);
			progressDialog.dismiss();
		}

	}

}
